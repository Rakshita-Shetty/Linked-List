3. Modify Q1 such that one can add a new element after any specified element.

4. Modify Q1 such that one can delete any specified element from the list.


#include <stdio.h>

#include <stdlib.h>



struct node {

   int data;

   struct node *next;

};



struct node *head = NULL;

struct node *current = NULL;

struct node *prev = NULL;



//Create Linked List

void insert(int data) {

   // Allocate memory for new node;

   struct node *link = (struct node*) malloc(sizeof(struct node));



   link->data = data;

   link->next = NULL;



   // If head is empty, create new list

   if(head==NULL) {

      head = link;

      return;

   }



   current = head;



   // move to the end of the list

   while(current->next!=NULL)

      current = current->next;



   // Insert link at the end of the list

   current->next = link;

}



void display() {

   struct node *ptr = head;



   printf("[head] =>");

   //start from the beginning

   while(ptr != NULL) {

      printf(" %d =>",ptr->data);

      ptr = ptr->next;

   }



   printf(" [null]\n");

}



void remove_data(int data) {

   int pos = 0;



   if(head==NULL) {

      printf("Linked List not initialized");

      return;

   }



   if(head->data == data) {

      if(head->next != NULL) {

         head = head->next;

         return;

      } else {

         head = NULL;

         printf("List is empty now");

         return;

      }

   } else if(head->data != data && head->next == NULL) {

      printf("%d not found in the list\n", data);

      return;

   }



   //prev = head;

   current = head;



   while(current->next != NULL && current->data != data) {

      prev = current;

      current = current->next;

   }



   if(current->data == data) {

      prev->next = prev->next->next;

      free(current);

   } else

      printf("%d not found in the list.", data);



}



void find_data(int item) {

   int pos = 0;



   if(head==NULL) {

      printf("Linked List not initialized");

      return;

   }



   current = head;

   while(current->next!=NULL) {

      if(current->data == item) {

         printf("%d found at position %d\n", item, pos);

         return;

      }



      current = current->next;

      pos++;

   }



   printf("%d does not exist in the list", item);

}

void print(){



    /* temp pointer points to head */



    struct node* temp = head;



    /* Initialize count variable  */



    int count=0;



    /* Traverse the linked list and maintain the count */



    while(temp != NULL){



       temp = temp->next;



        /* Increment count variable. */

        count++;



    }



     /* Print the total count. */



    printf("\nTotal no. of nodes is %d\n", count);



}



void add_at_position(struct node* head, int data, int position){

    struct node *ptr = head;

    struct node *ptr2 = malloc(sizeof(struct node));

    ptr2 -> data = data;

    ptr2 -> next = NULL;

    position --;

    while(position != 1)

    {

        ptr = ptr -> next;

        position --;

    }

    ptr2 ->next = ptr -> next;

    ptr -> next = ptr2;

    printf("Add at position3: ");

}



void del_position(struct node **head, int position)

{

    struct node *current = *head;

    struct node *prev = *head;

    if(*head == NULL)

    {

        printf("List is empty");



    }

    else if(position == 1)

    {

        *head = current -> next;

        free(current);

        current = NULL;

    }



    else{

        while(position != 1)

        {

            prev = current;

            current = current -> next;

            position --;

        }

        prev -> next = current -> next;

        free(current);

        current = NULL;

    }



     printf("Del at position3: ");



}





int main() {



    insert(10);

    insert(11);

    insert(12);

    insert(13);

    insert(15);

    insert(16);



    printf("Before Removal : ");

    display();

    remove_data(15);

    printf("After Removal  : ");

    display();

    find_data(12);

    find_data(13);

    print();

    add_at_position(head, 13, 3);

    display();

    del_position(&head, 3);

    display();







   return 0;

}

