1.      Create a single list with methods to add and delete elements from head and tail positions. Provide method to check whether an element is present in the list. Count number of elements in the list.
2.      Add methods to Q1 to find maximum and minimum elements in the list.

#include <stdio.h>

#include <stdlib.h>



struct node {

   int data;

   struct node *next;

};



struct node *head = NULL;

struct node *current = NULL;

struct node *prev = NULL;



//Create Linked List

void insert(int data) {

   // Allocate memory for new node;

   struct node *link = (struct node*) malloc(sizeof(struct node));



   link->data = data;

   link->next = NULL;



   // If head is empty, create new list

   if(head==NULL) {

      head = link;

      return;

   }



   current = head;



   // move to the end of the list

   while(current->next!=NULL)

      current = current->next;



   // Insert link at the end of the list

   current->next = link;

}



void display() {

   struct node *ptr = head;



   printf("head] =>");

   //start from the beginning

   while(ptr != NULL) {

      printf(" %d =>",ptr->data);

      ptr = ptr->next;

   }



   printf(" [null]\n");

}



void remove_data(int data) {

   int pos = 0;



   if(head==NULL) {

      printf("Linked List not initialized");

      return;

   }



   if(head->data == data) {

      if(head->next != NULL) {

         head = head->next;

         return;

      } else {

         head = NULL;

         printf("List is empty now");

         return;

      }

   } else if(head->data != data && head->next == NULL) {

      printf("%d not found in the list\n", data);

      return;

   }



   //prev = head;

   current = head;



   while(current->next != NULL && current->data != data) {

      prev = current;

      current = current->next;

   }



   if(current->data == data) {

      prev->next = prev->next->next;

      free(current);

   } else

      printf("%d not found in the list.", data);



}



void find_data(int item) {

   int pos = 0;



   if(head==NULL) {

      printf("Linked List not initialized");

      return;

   }



   current = head;

   while(current->next!=NULL) {

      if(current->data == item) {

         printf("%d found at position %d\n", item, pos);

         return;

      }



      current = current->next;

      pos++;

   }



   printf("%d does not exist in the list", item);

}

void print(){



    /* temp pointer points to head */



    struct node* temp = head;



    /* Initialize count variable  */



    int count=0;



    /* Traverse the linked list and maintain the count */



    while(temp != NULL){



       temp = temp->next;



        /* Increment count variable. */

        count++;



    }



     /* Print the total count. */



    printf("\nTotal no. of nodes is %d",count);



}



void maximum ()



{



     struct node *ptr = head; int max;



    if(head == NULL)  // empty list condition



    {



         printf("List is empty");

    }



    else



    {



            max = ptr -> data;   // assuming 1st node to be maximum



            ptr = ptr -> next;      // check starts from next node



            while (ptr != NULL)  // till last node is processed



           {



                   if (ptr -> data > max)   // is current node > max ?



                   {



                          max = ptr -> data;



                   }



                   ptr = ptr ->next;



            }



           printf ("\nMaximum node value = %d", max);



    }



}



void minimum ()



{



     struct node *ptr = head; int min;



    if(head == NULL)  // empty list condition



    {



         printf("List is empty");

    }



    else



    {



            min = ptr -> data;   // assuming 1st node to be maximum



            ptr = ptr -> next;      // check starts from next node



            while (ptr != NULL)  // till last node is processed



           {



                   if (ptr -> data < min)   // is current node > max ?



                   {



                          min = ptr -> data;



                   }



                   ptr = ptr ->next;



            }



           printf ("\nMinimum node value = %d", min);



    }



}





int main() {

   insert(10);

   insert(11);

   insert(12);

   insert(13);

   insert(14);

   insert(15);



   printf("Before Removal : ");

   display();

   remove_data(13);

   printf("After Removal  : ");

   display();

   find_data(10);

   find_data(15);

   print();

   maximum();

   minimum();



   return 0;

}

